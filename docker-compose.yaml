services:
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    ports:
      - "${ETCD_PORT}:2379"
    volumes:
      - ${PERSISTENCE_PATH}/etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - TZ=Asia/Kuala_Lumpur
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - ${PERSISTENCE_PATH}/minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.4.6-gpu
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      - TZ=Asia/Kuala_Lumpur
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
      - MINIO_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
    volumes:
      - ${PERSISTENCE_PATH}/milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: ["gpu"]
              device_ids: ["0"]
    depends_on:
      - "etcd"
      - "minio"

  ollama:
    volumes:
      - ${PERSISTENCE_PATH}/ollama_data:/root/.ollama
    container_name: ollama
    pull_policy: always
    tty: true
    restart: unless-stopped
    image: ollama/ollama:latest
    ports:
      - 7869:11434
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - TZ=Asia/Kuala_Lumpur
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  langfuse-server:
    image: langfuse/langfuse:2
    container_name: langfuse-server
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      - TZ=Asia/Kuala_Lumpur
      - DATABASE_URL=postgresql://${POSTGRESS_USER}:${POSTGRESS_PASS}@db:5432/${POSTGRESS_DB}
      - NEXTAUTH_SECRET=${LANGFUSE_PASS}
      - SALT=mysalt
      - NEXTAUTH_URL=http://localhost:3000
      - TELEMETRY_ENABLED=${TELEMETRY_ENABLED:-true}
      - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=${LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES:-false}
    #volumes:
    #  - ${PERSISTENCE_PATH}/langfuse_data:/root/.ollama

  db:
    image: postgres
    restart: always
    container_name: postgres_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    environment:
      - TZ=Asia/Kuala_Lumpur
      - POSTGRES_USER=${POSTGRESS_USER}
      - POSTGRES_PASSWORD=${POSTGRESS_PASS}
      - POSTGRES_DB=${POSTGRESS_DB}
      #- PGDATA=/var/lib/postgresql/data/pgdata
    #user: 1000:1000
    ports:
      - 5432:5432
    volumes:
      - db_data:/var/lib/postgresql/data


  backend:
    volumes:
      - ./backend:/root/backend
    container_name: fastapi
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    environment:
      - TZ=Asia/Kuala_Lumpur
      - LANGFUSE_URL=http://langfuse-server:3000
      - MILVUS_URL=http://standalone:19530
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - JINAAI_API_KEY=${JINAAI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
    depends_on:
      - "ollama"
      - "standalone"
    ports:
      - "${FASTAPI_PORT}:8000"

networks:
  default:
    name: llama-hack

volumes:
  milvus_data:
  minio_data:
  etcd_data:
  ollama_data:
  db_data:
    external: true